"use strict";
/*
 * AvaTax Software Development Kit for JavaScript
 *
 * (c) 2004-2022 Avalara, Inc.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @author     Jonathan Wenger <jonathan.wenger@avalara.com>
 * @author     Sachin Baijal <sachin.baijal@avalara.com>
 * @copyright  2004-2018 Avalara, Inc.
 * @license    https://www.apache.org/licenses/LICENSE-2.0
 * @link       https://github.com/avadev/AvaTax-REST-V2-JS-SDK
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiDocumentModel = void 0;
var Enums = require("../enums/index");
var TransactionModel_1 = require("./TransactionModel");
var json2typescript_1 = require("json2typescript");
var dateConverter_1 = require("../utils/dateConverter");
/**
 * A MultiDocument transaction represents a sale or purchase that occurred between more than two companies.
            
A traditional transaction requires exactly two parties: a seller and a buyer.  MultiDocument transactions can
involve a marketplace of vendors, each of which contributes some portion of the final transaction.  Within
a MultiDocument transaction, each individual buyer and seller pair are matched up and converted to a separate
document.  This separation of documents allows each seller to file their taxes separately.
 * @export
 * @class MultiDocumentModel
 */
var MultiDocumentModel = exports.MultiDocumentModel = /** @class */ (function () {
    function MultiDocumentModel() {
        /**
         * @type {number}
         * @memberof MultiDocumentModel
         */
        this.id = undefined;
        /**
         * @type {number}
         * @memberof MultiDocumentModel
         */
        this.accountId = undefined;
        /**
         * @type {string}
         * @memberof MultiDocumentModel
         */
        this.code = undefined;
        /**
         * @type {Enums.DocumentType}
         * @memberof MultiDocumentModel
         */
        this.type = undefined;
        /**
         * @type {number}
         * @memberof MultiDocumentModel
         */
        this.createdUserId = undefined;
        /**
         * @type {Date}
         * @memberof MultiDocumentModel
         */
        this.createdDate = undefined;
        /**
         * @type {Date}
         * @memberof MultiDocumentModel
         */
        this.modifiedDate = undefined;
        /**
         * @type {number}
         * @memberof MultiDocumentModel
         */
        this.modifiedUserId = undefined;
        /**
         * @type {TransactionModel[]}
         * @memberof MultiDocumentModel
         */
        this.documents = undefined;
    }
    __decorate([
        (0, json2typescript_1.JsonProperty)("id", Number, true),
        __metadata("design:type", Number)
    ], MultiDocumentModel.prototype, "id", void 0);
    __decorate([
        (0, json2typescript_1.JsonProperty)("accountId", Number, true),
        __metadata("design:type", Number)
    ], MultiDocumentModel.prototype, "accountId", void 0);
    __decorate([
        (0, json2typescript_1.JsonProperty)("code", String, true),
        __metadata("design:type", String)
    ], MultiDocumentModel.prototype, "code", void 0);
    __decorate([
        (0, json2typescript_1.JsonProperty)("type", Enums.DocumentTypeConverter, true),
        __metadata("design:type", Number)
    ], MultiDocumentModel.prototype, "type", void 0);
    __decorate([
        (0, json2typescript_1.JsonProperty)("createdUserId", Number, true),
        __metadata("design:type", Number)
    ], MultiDocumentModel.prototype, "createdUserId", void 0);
    __decorate([
        (0, json2typescript_1.JsonProperty)("createdDate", dateConverter_1.DateConverter, true),
        __metadata("design:type", Date)
    ], MultiDocumentModel.prototype, "createdDate", void 0);
    __decorate([
        (0, json2typescript_1.JsonProperty)("modifiedDate", dateConverter_1.DateConverter, true),
        __metadata("design:type", Date)
    ], MultiDocumentModel.prototype, "modifiedDate", void 0);
    __decorate([
        (0, json2typescript_1.JsonProperty)("modifiedUserId", Number, true),
        __metadata("design:type", Number)
    ], MultiDocumentModel.prototype, "modifiedUserId", void 0);
    __decorate([
        (0, json2typescript_1.JsonProperty)("documents", [TransactionModel_1.TransactionModel], true),
        __metadata("design:type", Array)
    ], MultiDocumentModel.prototype, "documents", void 0);
    MultiDocumentModel = __decorate([
        (0, json2typescript_1.JsonObject)("MultiDocumentModel")
    ], MultiDocumentModel);
    return MultiDocumentModel;
}());
