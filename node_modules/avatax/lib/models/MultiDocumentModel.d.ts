import * as Enums from '../enums/index';
import { TransactionModel } from "./TransactionModel";
/**
 * A MultiDocument transaction represents a sale or purchase that occurred between more than two companies.
            
A traditional transaction requires exactly two parties: a seller and a buyer.  MultiDocument transactions can
involve a marketplace of vendors, each of which contributes some portion of the final transaction.  Within
a MultiDocument transaction, each individual buyer and seller pair are matched up and converted to a separate
document.  This separation of documents allows each seller to file their taxes separately.
 * @export
 * @class MultiDocumentModel
 */
export declare class MultiDocumentModel {
    /**
     * @type {number}
     * @memberof MultiDocumentModel
     */
    id?: number | undefined;
    /**
     * @type {number}
     * @memberof MultiDocumentModel
     */
    accountId?: number | undefined;
    /**
     * @type {string}
     * @memberof MultiDocumentModel
     */
    code?: string | undefined;
    /**
     * @type {Enums.DocumentType}
     * @memberof MultiDocumentModel
     */
    type?: Enums.DocumentType | undefined;
    /**
     * @type {number}
     * @memberof MultiDocumentModel
     */
    createdUserId?: number | undefined;
    /**
     * @type {Date}
     * @memberof MultiDocumentModel
     */
    createdDate?: Date | undefined;
    /**
     * @type {Date}
     * @memberof MultiDocumentModel
     */
    modifiedDate?: Date | undefined;
    /**
     * @type {number}
     * @memberof MultiDocumentModel
     */
    modifiedUserId?: number | undefined;
    /**
     * @type {TransactionModel[]}
     * @memberof MultiDocumentModel
     */
    documents?: TransactionModel[] | undefined;
}
