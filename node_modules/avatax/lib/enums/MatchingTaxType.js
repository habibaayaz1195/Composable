"use strict";
/*
 * AvaTax Software Development Kit for JavaScript
 *
 * (c) 2004-2022 Avalara, Inc.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @author     Jonathan Wenger <jonathan.wenger@avalara.com>
 * @author     Sachin Baijal <sachin.baijal@avalara.com>
 * @copyright  2004-2018 Avalara, Inc.
 * @license    https://www.apache.org/licenses/LICENSE-2.0
 * @link       https://github.com/avadev/AvaTax-REST-V2-JS-SDK
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MatchingTaxTypeConverter = exports.MatchingTaxType = void 0;
var json2typescript_1 = require("json2typescript");
/**
* @export
* @enum {string}
*/
var MatchingTaxType;
(function (MatchingTaxType) {
    MatchingTaxType[MatchingTaxType["E"] = 5] = "E";
    MatchingTaxType[MatchingTaxType["Lodging"] = 6] = "Lodging";
    MatchingTaxType[MatchingTaxType["Bottle"] = 7] = "Bottle";
    MatchingTaxType[MatchingTaxType["RentToOwn"] = 8] = "RentToOwn";
    MatchingTaxType[MatchingTaxType["BikeTax"] = 11] = "BikeTax";
    MatchingTaxType[MatchingTaxType["LandedCost"] = 12] = "LandedCost";
    MatchingTaxType[MatchingTaxType["CheckoutBag"] = 13] = "CheckoutBag";
    MatchingTaxType[MatchingTaxType["Alcohol"] = 17] = "Alcohol";
    MatchingTaxType[MatchingTaxType["Amusement"] = 20] = "Amusement";
    MatchingTaxType[MatchingTaxType["Hospitality"] = 21] = "Hospitality";
    MatchingTaxType[MatchingTaxType["RentalLeasing"] = 23] = "RentalLeasing";
    MatchingTaxType[MatchingTaxType["GrossReceipts"] = 24] = "GrossReceipts";
    MatchingTaxType[MatchingTaxType["Mattress"] = 25] = "Mattress";
    MatchingTaxType[MatchingTaxType["Lumber"] = 27] = "Lumber";
    MatchingTaxType[MatchingTaxType["Paint"] = 28] = "Paint";
    MatchingTaxType[MatchingTaxType["Tires"] = 29] = "Tires";
    MatchingTaxType[MatchingTaxType["EI"] = 30] = "EI";
    MatchingTaxType[MatchingTaxType["All"] = 65] = "All";
    MatchingTaxType[MatchingTaxType["BothSalesAndUseTax"] = 66] = "BothSalesAndUseTax";
    MatchingTaxType[MatchingTaxType["ConsumerUseTax"] = 67] = "ConsumerUseTax";
    MatchingTaxType[MatchingTaxType["ConsumersUseAndSellersUseTax"] = 68] = "ConsumersUseAndSellersUseTax";
    MatchingTaxType[MatchingTaxType["ConsumerUseAndSalesTax"] = 69] = "ConsumerUseAndSalesTax";
    MatchingTaxType[MatchingTaxType["Fee"] = 70] = "Fee";
    MatchingTaxType[MatchingTaxType["VATInputTax"] = 73] = "VATInputTax";
    MatchingTaxType[MatchingTaxType["LightBulbs"] = 76] = "LightBulbs";
    MatchingTaxType[MatchingTaxType["Meals"] = 77] = "Meals";
    MatchingTaxType[MatchingTaxType["VATNonrecoverableInputTax"] = 78] = "VATNonrecoverableInputTax";
    MatchingTaxType[MatchingTaxType["VATOutputTax"] = 79] = "VATOutputTax";
    MatchingTaxType[MatchingTaxType["PIF"] = 80] = "PIF";
    MatchingTaxType[MatchingTaxType["Rental"] = 82] = "Rental";
    MatchingTaxType[MatchingTaxType["SalesTax"] = 83] = "SalesTax";
    MatchingTaxType[MatchingTaxType["UseTax"] = 85] = "UseTax";
    MatchingTaxType[MatchingTaxType["EWaste"] = 87] = "EWaste";
    MatchingTaxType[MatchingTaxType["Batteries"] = 90] = "Batteries";
})(MatchingTaxType || (exports.MatchingTaxType = MatchingTaxType = {}));
var MatchingTaxTypeConverter = exports.MatchingTaxTypeConverter = /** @class */ (function () {
    function MatchingTaxTypeConverter() {
    }
    MatchingTaxTypeConverter.prototype.serialize = function (data) {
        return data;
    };
    MatchingTaxTypeConverter.prototype.deserialize = function (enumType) {
        return MatchingTaxType[enumType];
    };
    MatchingTaxTypeConverter = __decorate([
        json2typescript_1.JsonConverter
    ], MatchingTaxTypeConverter);
    return MatchingTaxTypeConverter;
}());
