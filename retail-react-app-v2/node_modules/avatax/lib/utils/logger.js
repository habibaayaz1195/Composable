"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogLevel = void 0;
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["Error"] = 0] = "Error";
    LogLevel[LogLevel["Warn"] = 1] = "Warn";
    LogLevel[LogLevel["Info"] = 2] = "Info";
    LogLevel[LogLevel["Debug"] = 3] = "Debug";
})(LogLevel || (exports.LogLevel = LogLevel = {}));
var Logger = /** @class */ (function () {
    function Logger(_a) {
        var logEnabled = _a.logEnabled, logLevel = _a.logLevel, logRequestAndResponseInfo = _a.logRequestAndResponseInfo, logger = _a.logger;
        this.logEnabled = logEnabled;
        this.logLevel = logLevel;
        this.logRequestAndResponseInfo = logRequestAndResponseInfo;
        if (logger) {
            if (this.isValidCustomLogger(logger)) {
                this.logger = logger;
            }
            else {
                this.error("Invalid custom logger was passed in via the AvaTaxClient constructor. Make sure it implements the BaseLogger (./utils/logger) interface properly");
            }
        }
    }
    Logger.prototype.debug = function (message) {
        if (this.logLevel >= LogLevel.Debug && this.logEnabled) {
            this.logger ? this.logger.debug(message) : console.debug(message);
        }
    };
    Logger.prototype.info = function (message) {
        if (this.logLevel >= LogLevel.Info && this.logEnabled) {
            this.logger ? this.logger.info(message) : console.info(message);
        }
    };
    Logger.prototype.warn = function (message) {
        if (this.logLevel >= LogLevel.Warn && this.logEnabled) {
            this.logger ? this.logger.warn(message) : console.warn(message);
        }
    };
    Logger.prototype.error = function (message) {
        if (this.logLevel >= LogLevel.Error && this.logEnabled) {
            this.logger ? this.logger.error(message) : console.error(message);
        }
    };
    Logger.prototype.log = function (logLevel, message) {
        switch (logLevel) {
            case LogLevel.Debug:
                this.debug(message);
                break;
            case LogLevel.Info:
                this.info(message);
                break;
            case LogLevel.Warn:
                this.warn(message);
                break;
            case LogLevel.Error:
                this.error(message);
                break;
        }
    };
    // Type-guard for custom logger being injected into the SDK configuration.
    Logger.prototype.isValidCustomLogger = function (logger) {
        return (typeof logger.debug === "function" &&
            typeof logger.info === "function" &&
            typeof logger.warn === "function" &&
            typeof logger.error === "function" &&
            typeof logger.log === "function");
    };
    return Logger;
}());
exports.default = Logger;
