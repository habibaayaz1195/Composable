"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var LogObject = /** @class */ (function () {
    function LogObject(logRequestAndResponseInfo) {
        this.logRequestAndResponseInfo = false;
        this.logRequestAndResponseInfo = logRequestAndResponseInfo;
    }
    LogObject.prototype.populateRequestInfo = function (uri, options, payload) {
        this.timestamp = new Date().toUTCString();
        this.startTime = Date.now();
        this.httpMethod = options.method;
        this.requestURI = uri;
        if (payload && this.logRequestAndResponseInfo) {
            this.requestDetails = payload;
        }
    };
    LogObject.prototype.populateResponseInfo = function (response, json) {
        this.populateCorrelationId(response.headers);
        this.populateStatusCode(response);
        if (json && this.logRequestAndResponseInfo) {
            this.responseDetails = json;
        }
    };
    LogObject.prototype.populateErrorInfo = function (response, errorInfo) {
        this.populateCorrelationId(response.headers);
        this.populateStatusCode(response);
        if (errorInfo) {
            this.errorInfo = errorInfo;
        }
    };
    LogObject.prototype.populateElapsedTime = function () {
        this.totalExecutionTime = Date.now() - this.startTime;
    };
    LogObject.prototype.getStatusCode = function () {
        return this.statusCode;
    };
    LogObject.prototype.toString = function () {
        var _a = this, httpMethod = _a.httpMethod, correlationId = _a.correlationId, requestDetails = _a.requestDetails, responseDetails = _a.responseDetails, requestURI = _a.requestURI, totalExecutionTime = _a.totalExecutionTime, statusCode = _a.statusCode, timestamp = _a.timestamp, errorInfo = _a.errorInfo;
        return JSON.stringify({
            httpMethod: httpMethod,
            correlationId: correlationId,
            requestDetails: requestDetails,
            responseDetails: responseDetails,
            requestURI: requestURI,
            totalExecutionTime: totalExecutionTime,
            statusCode: statusCode,
            timestamp: timestamp,
            errorInfo: errorInfo
        });
    };
    LogObject.prototype.populateStatusCode = function (response) {
        this.statusCode = response.status;
    };
    LogObject.prototype.populateCorrelationId = function (headers) {
        if (headers.get('x-correlation-id')) {
            this.correlationId = headers.get('x-correlation-id');
        }
    };
    return LogObject;
}());
exports.default = LogObject;
